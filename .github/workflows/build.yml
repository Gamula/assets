name: "[assets] - build"
on:
  push: { branches: [ main ] }
  workflow_dispatch: { inputs: { ARTIFACT_MODE: { description: "(choice): artifact mode", type: choice, options: [ packsquash, archive ], required: true } } }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "[build:checkout] - clone"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: "[build:evaluate] - mode"
        id: evaluate-mode
        uses: actions/github-script@v7
        env:
          MODE_VAR: ${{ vars.ARTIFACT_MODE }}
          MODE_INPUT: ${{ inputs.ARTIFACT_MODE }}
        with:
          result-encoding: "string"
          script: |-
            const { invoke } = await import("${{ github.workspace }}/actions/scripts/${{ github.action }}.js")
            return await invoke(...arguments)

      - name: "[build:artifact] - packsquash"
        if: ${{ steps.evaluate-mode.outputs.result == 'packsquash' }}
        uses: ComunidadAylas/PackSquash-action@v4
        with:
          system_id: ${{ secrets.PACKSQUASH_UID }}
          action_cache_revision: ${{ secrets.PACKSQUASH_REV }}
          packsquash_version: ${{ vars.PACKSQUASH_VER }}
          artifact_name: ${{ vars.ARTIFACT_NAME }}
          options: |-
            pack_directory = "${{ vars.SRC_PATH }}"
            output_file_path = "${{ vars.DIST_PATH }}"
            recompress_compressed_files = false
            zip_compression_iterations = 32
            automatic_minecraft_quirks_detection = false
            work_around_minecraft_quirks = []
            automatic_asset_types_mask_detection = false
            allow_mods = ["OptiFine"]
            skip_pack_icon = false
            validate_pack_metadata_file = true
            ignore_system_and_hidden_files = true
            zip_spec_conformance_level = "disregard"
            size_increasing_zip_obfuscation = true
            percentage_of_zip_structures_tuned_for_obfuscation_discretion = 100
            never_store_squash_times = false

            ["**/*.{og[ga],mp3,wav,flac}"]
            transcode_ogg = true

            ["**/*.{json,jsonc,mcmeta,mcmetac,jpm,jpmc,jem,jemc,bbmodel,bbmodelc}"]
            minify_json = true
            delete_bloat_keys = true
            always_allow_json_comments = false

            ["**/*.png"]
            image_data_compression_iterations = 24
            color_quantization_target = "auto"
            color_quantization_dithering_level = 0.85
            maximum_width_and_height = 8192
            skip_alpha_optimizations = true
            downsize_if_single_color = true

            ["**/*.{fsh,vsh,glsl}"]
            shader_source_transformation_strategy = "keep_as_is"

            ["**/*.properties"]
            minify_properties = true

      - name: "[build:artifact] - archive (7z)"
        if: ${{ steps.evaluate-mode.outputs.result == 'archive' }}
        run: 7z a -tzip -mx9 -bb3 "${{ vars.DIST_PATH }}" -w "${{ vars.SRC_PATH }}/."

      - name: "[build:publish] - artifact"
        id: publish-artifact
        uses: actions/github-script@v7
        env:
          ARTIFACT_PATH: ${{ vars.DIST_PATH }}
          ARTIFACT_MODE: ${{ steps.evaluate-mode.outputs.result }}
        with:
          script: |-
            const { invoke } = await import("${{ github.workspace }}/actions/scripts/${{ github.action }}.js")
            return await invoke(...arguments)

      - name: "[build:sync] - assets"
        id: sync-assets
        uses: actions/github-script@v7
        env:
          SYNC_ORG: ${{ github.repository_owner }}
          SYNC_REPO: "modules"
          SYNC_ID: "assets::sync"
          SYNC_PAYLOAD: ${{ steps.publish-artifact.outputs.result }}
        with:
          github-token: ${{ secrets.SSH_TOKEN }}
          script: |-
            const { invoke } = await import("${{ github.workspace }}/actions/scripts/${{ github.action }}.js")
            return await invoke(...arguments)
